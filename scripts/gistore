#!/usr/bin/env python

import argparse
from datetime import datetime
import os
import shutil
import sys
import typing as t
import os.path as opath
import json
import subprocess

import re
import getpass
import uuid


class BackupItem:
    def __init__(self, id: str, name: str, rpath: str, mtime: str, ftype: str) -> None:
        self.id = id
        self.name = name
        self.rpath = rpath
        self.mtime = mtime
        self.ftype = ftype

    def to_dict(self) -> t.Dict[str, t.Any]:
        return {
            "id": self.id,
            "name": self.name,
            "rpath": self.rpath,
            "mtime": self.mtime,
            "ftype": self.ftype,
        }

    def get_name_dir(self) -> str:
        return filename_sanitize(self.name)


class BackupDir:
    def __init__(self, root_dirs: t.List[str], items: t.List[BackupItem]) -> None:
        self.root_dirs = root_dirs
        self.items = items

    def to_dict(self) -> t.Dict[str, t.Any]:
        return {"root_dirs": self.root_dirs, "items": [x.to_dict() for x in self.items]}


def msg(msg: str):
    m = re.sub(r"^(.*)$", r"   \1", msg, flags=re.MULTILINE).strip()
    print(f"=> {m}")


def msg2(msg: str):
    m = re.sub(r"^(.*)$", r"     \1", msg, flags=re.MULTILINE).strip()
    print(f"  -> {m}")


CONFIG_FILE_NAME = ".gistore"


def config_filepath(root_dir: str) -> str:
    return opath.join(root_dir, CONFIG_FILE_NAME)


def config_read(root_dir: str) -> BackupDir:
    with open(config_filepath(root_dir=root_dir), "r") as cf:
        jn = json.load(cf)
    root_dirs = jn["root_dirs"]

    if not isinstance(root_dirs, list):
        raise Exception("Unable to read root_dirs")

    items = [
        BackupItem(
            id=ijn["id"] if "id" in ijn else str(uuid.uuid4()),
            name=ijn["name"],
            rpath=ijn["rpath"],
            mtime=ijn["mtime"] if "mtime" in ijn else "0",
            ftype=ijn["ftype"],
        )
        for ijn in jn["items"]
    ]

    ids = set([x.id for x in items])
    if len(ids) < len(items):
        raise Exception("There are some duplicate ids, recheck ids.")

    return BackupDir(root_dirs=root_dirs, items=items)


def filepath_extend(ori: str) -> str:
    n = ori.replace("${USER}", getpass.getuser())

    return n


def filename_sanitize(filename):
    return re.sub(r"[^\w\u4e00-\u9fa5]", "_", filename)


def dir_backup(backup_dirpath: str):
    backup_dirpath = os.path.realpath(backup_dirpath)
    os.chdir(backup_dirpath)
    if not opath.exists(opath.join(backup_dirpath, ".git")):
        msg2(f"git-init: {backup_dirpath}")
        subprocess.call(
            ["git", "init"],
            stdout=subprocess.DEVNULL,
        )
        subprocess.call(["git", "lfs", "track", "*"], stdout=subprocess.DEVNULL)
        subprocess.call(["git", "add", "."], stdout=subprocess.DEVNULL)
        subprocess.call(["git", "commit", "-m", "init"])

    config_path = config_filepath(root_dir=backup_dirpath)
    # read config
    config = config_read(backup_dirpath)

    for root in config.root_dirs:
        msg(f"Begin to backup: {root}")
        if not opath.exists(root):
            msg(f"unable to read dir {root}")
            continue

        for item in config.items:
            msg(f"Backup item: {item.name}")
            name_dirpath = opath.join(backup_dirpath, item.get_name_dir())

            ftype_id_filename = filename_sanitize(f"{item.ftype}-{item.id}")
            ftype_id_dirpath = opath.join(name_dirpath, ftype_id_filename)

            full_path = opath.join(root, item.rpath)
            humantime = datetime.fromtimestamp(int(os.path.getmtime(full_path)))
            mtime = humantime.strftime("%Y%m%d%H%M%S")
            os.makedirs(name_dirpath, exist_ok=True)
            if mtime > item.mtime:
                try:
                    shutil.rmtree(ftype_id_dirpath)
                except Exception as ex:
                    pass
                shutil.copytree(full_path, ftype_id_dirpath)

                if args.update_mtime:
                    item.mtime = mtime
                with open(config_filepath(root_dir=backup_dirpath), "w") as cf:
                    json.dump(config.to_dict(), cf, indent=2)

                msg2(f"git-add: {ftype_id_dirpath}")
                subprocess.call(
                    ["git", "add", config_path, ftype_id_dirpath],
                    stdout=subprocess.DEVNULL,
                )
                commit_msg = f"{humantime} || {item.name} || {item.ftype} || {item.id}"
                msg2(f"git-commit: {commit_msg}")
                subprocess.call(
                    [
                        "git",
                        "commit",
                        "-m",
                        f"{commit_msg}",
                    ],
                    stdout=subprocess.DEVNULL,
                )


parser = argparse.ArgumentParser(
    prog="gistore",
    description="Backup file with git lfs",
    epilog="v0.0.1.2409-22",
)

parser.add_argument("workdir")
parser.add_argument("--update-mtime", required=False, default=True)

args = parser.parse_args()

dir_backup(args.workdir)

