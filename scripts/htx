#!/usr/bin/env bash

set -eu
WORK_DIR="$PWD"
LOG_DIR="${WORK_DIR}/htx-log"

msg() { echo -e "\033[32m==> \033[0m$(date +%H:%M:%S) ~ $*" >&2; }
msg2() { echo -e "\033[32m -> \033[0m$(date +%H:%M:%S) ~ $*" >&2; }
warn() { echo -e "\033[33m==> \033[0m$(date +%H:%M:%S) ~ $*" >&2; }
warn2() { echo -e "\033[33m -> \033[0m$(date +%H:%M:%S) ~ $*" >&2; }
error() { echo -e "\033[31m==> $(date +%H:%M:%S) ~ $*\033[0m" >&2; }
error2() { echo -e "\033[31m -> $(date +%H:%M:%S) ~ $*\033[0m" >&2; }
die() {
    error "$*"
    exit 1
}
die2() {
    error2 "$*"
    exit 1
}
indent() { awk "{print \"$1\", strftime(\"%H:%M:%S\", systime()), \"-\", \$0}"; }

_create() {
    local req_file method

    req_file="$1"
    method="$2"

    cat >"$req_file" <<EOF
#!/usr/bin/env bash

set -eu; CURL_ARGS=(); DEBUG="\${DEBUG:-false}"
\$DEBUG && { set -x; CURL_ARGS+="-v"; }

###########################
# CREATE_AT: $(date +%Y%m%d-%H%M%S)



###########################
# Method Part
METHOD="${method^^}"

###########################
# URL Part
URL="http://"

###########################
# Header Part
HEADERS=(
    "Content-Type: application/json"
)

###########################
# Body Part 
BODY="\$(cat <<EOB
EOB
)"


#########################
CURL_ARGS+=("-X" "\$METHOD")
CURL_ARGS+=("\$URL")
for h in "\${HEADERS[@]}"; do
    CURL_ARGS+=('-H' "\$h")
done

[ "\${METHOD,,}" = "get" ] || CURL_ARGS+=('-d' "\$BODY")

curl "\${CURL_ARGS[@]}"
EOF
}

_create_simple() {
    local req_file

    req_file="$1"

    cat >"$req_file" <<EOF
#!/usr/bin/env bash

set -eu; CURL_ARGS=(); DEBUG="\${DEBUG:-false}"
\$DEBUG && { set -x; CURL_ARGS+="-v"; }

###########################
# CREATE_AT: $(date +%Y%m%d-%H%M%S)


EOF
}

_edit() {
    local title req_file method
    method="$2"
    title="$1"

    if test -f "$title"; then
        req_file="$(realpath "$title")"
    else
        if echo "$title" | grep -E '^.*.htx$'; then
            req_file="$(realpath "$title")"
        else
		req_file="${WORK_DIR}/$(date +%y%m-%d)-${title}-${method,,}.htx"
        fi
        if ! test -f "$req_file"; then
	   if [ "${method,,}" = "simple" ]; then
               _create_simple "$req_file"
	   else
               _create "$req_file" "$method"
	   fi
        fi
    fi
    vim "$req_file"
}

_exec() {
    local log_file req_file

    req_file="$1"
    log_file="${LOG_DIR}/${req_file##*/}--$(date +%y%m-%d-%H%M%S)-${RANDOM}.log"

    mkdir -p "$LOG_DIR"

    msg "Begin to request: $log_file"
    bash "$req_file" |& tee "$log_file"
    echo
    msg "Finished: $log_file"
}

_list() {
    cd "${WORK_DIR}"
    ls -lh *.htx
}

_help() {
    cat <<EOF
ep <file>
eg <file>
e | edit <file> <method>
x | exec <file>
l | ls list
EOF
}

if [ $# -eq 0 ]; then
    _help
fi

while [ $# -gt 0 ]; do
    case "$1" in
    ep)
        _edit "$2" post
        shift
        ;;
    eg)
        _edit "$2" get
        shift
        ;;
    e | edit)
        _edit "$2" "$3"
        shift
        shift
        ;;
    es | editsimple)
        _edit "$2" "simple"
        shift
        ;;
    x | exec)
        _exec "$2"
        shift
        ;;
    D | debug)
	export DEBUG=true
	_exec "$2"
        shift
	;;
    l | ls | list)
        _list
        ;;
    *)
        die "unknown option $1"
        ;;
    esac
    shift
done
