#!/usr/bin/env bash

set -e

SCRIPT="${0##*/}"

# Nut Properties
ISLAND=""
MAINLAND=""
COPY_MODE=false
DFM_FILE=""

WORK_MODE=

CURRENT_LEVEL=0

## Tool Functions
free_nut() {
    ISLAND=""
    MAINLAND=""
    COPY_MODE=false
    DFM_FILE=""
}

## In/Out
__msg() {
    local fmt lvl
    fmt="$1"
    shift

    case "$1" in
        -)
            CURRENT_LEVEL=$(($CURRENT_LEVEL-1))
            shift
            ;;
        +)
            CURRENT_LEVEL=$(($CURRENT_LEVEL+1))
            shift
            ;;
        =) shift ;;
        [0-9])
            CURRENT_LEVEL=$1
            shift
            ;;
    esac

    lvl=$((CURRENT_LEVEL*2 + 2))

    printf "%0${lvl}s${fmt}" " " "$*"
}

_log_level() {
    case "$1" in
        -)
            CURRENT_LEVEL=$(($CURRENT_LEVEL-1))
            shift
            ;;
        +)
            CURRENT_LEVEL=$(($CURRENT_LEVEL+1))
            shift
            ;;
        [0-9])
            CURRENT_LEVEL=$1
            shift
            ;;
    esac
}

_debug() {
    $DEBUG && __msg "-> \033[32m%s\033[0m\n" "$@"
}

_info() {
    __msg "=> \033[35m%s\033[0m\n" "$@"
}

_warn() {
    __msg "!! \033[31m%s\033[0m\n" "$@"
}

_die() {
    _warn "$@"
    exit 1
}

_read() {
    local readr

    __msg "<- %s: " "$@" >&2

    read -r readr
    echo "$readr"
}

_edit_temp() {
    local temp="$(mktemp)"
    echo "$*" > "$temp"

    $EDITOR "$temp" >/dev/tty
    cat "$temp"
    rm "$temp"
}

_y_or_n() {
    local readr

    __msg "<- %s: y/[n]" "$@" >&2

    read -r readr

    [ xy = "x$readr" ]
}

## File Functions
# (FILE MSG)
_die_if_link() {
    if [ -L "$1" ]; then
        _die "File $1 is symlink: $2"
        ls -lh "$1"
        exit 1
    fi
}

# (FILE MSG)
_die_if_absent() {
    if [ ! -e "$2" ]; then
        _die "File \`$2' is not existed: $1"
    fi
}

_file_exist() {
    [ -n "$1" ] && ([ -e "$1" ] || [ -L "$1" ])
}

_create_dir() {
    [ -d "${1}" ] || ( msg2 "makdir ${1}"; mkdir -p "${1}" )
}

_has_mv_perm() {
    [ -w "${1%/*}" ] && [ -w "$1" ]
}

# (ISLAND MAINLAND)
_should_copy() {
    return 1
}

_is_link_of() {
    ( [ -L "$1" ] && [ -e "$2" ] ) || return 1

    local a="$(realpath "$(readlink "$1" || echo "$1")")"
    local b="$(realpath "$2")"

    [ "$a" = "$b" ]
}

# Args: file
#   try to detect file is up to date. So we can safely overwrite it.
#
# Return
#   0 -- file is up to date(include file is not existed)
#   1 -- file is not up to date
#   2 -- file is not in a git repo
_git_file_up_to_date() {
    local last file realfile
    realfile="$(realpath "$1" 2> /dev/null)"
    dir="${realfile}"

    while [ "$last" != "$dir" ]; do
        dir="${dir%/*}"
        if [ -d "${dir}/.git" ]; then
            cd "${dir}"
            if [ -z "$(git status --porcelain=v2 "$realfile")" ]; then
                return 0
            else
                return 1
            fi
        fi
        last="$dir"
    done
    return 2
}

## Store Part
_store() {
    _info "begin to store"

    if $COPY_MODE; then
        _info cp -r "$ISLAND" "$MAINLAND"
        cp -r "$ISLAND" "$MAINLAND"
    else
        _info mv "$MAINLAND" "$ISLAND"
        mv "$MAINLAND" "$ISLAND"
        _restore
    fi
}

_restore() {
    _info "begin to restore"

    if $COPY_MODE; then
        _info cp -r "$MAINLAND" "$ISLAND"
        cp -r "$MAINLAND" "$ISLAND"
    else
        _info ln -s "$ISLAND" "$MAINLAND"
        ln -s "$ISLAND" "$MAINLAND"
    fi

}

# Restore Part
_wrapper() {
    local answer new_world new_island
    
    _info 1 "MAINLAND: $(stat --printf '%15F, %.19y -- %n' "${MAINLAND}" 2>&1)"
    _info "  ISLAND: $(stat --printf '%15F, %.19y -- %n' "${ISLAND}" 2>&1)"
    _log_level +
    

    if [ -z "$MAINLAND" ] || [ -z "$ISLAND" ]; then
        _die "Nothing to do because MAINLAND or ISLAND is empty."
    elif _file_exist "$MAINLAND" && ! _file_exist "$ISLAND"; then
        WORK_MODE=store
    elif ! _file_exist "$MAINLAND" && _file_exist "$ISLAND"; then
        WORK_MODE=restore
    elif ! _file_exist "$MAINLAND" && ! _file_exist "$ISLAND"; then
        _warn "Nothing to do because MAINLAND and ISLAND is not existed."
        exit 1
    else
        _warn "Both MAINLAND and ISLAND are existed."

        if _is_link_of "${MAINLAND}" "${ISLAND}"; then
            _info "Already Linked"
            _info "$(ls -lh $MAINLAND)"
            WORK_MODE=linked
        else

            _log_level +

            if [ ! -L "$MAINLAND" ]; then
                _info "[s]tore Remove ISLAND: \`$PWD/$ISLAND'."
            fi
            _info "[r]estore Remove MAINLAND: \`$PWD/$MAINLAND'."
            if [ -d "${MAINLAND}" ]; then
                new_world="${MAINLAND%/}/${ISLAND##*/}"
                _info "Restore to [n]ew [w]orld($new_world)."
            fi
            if [ -d "${ISLAND}" ]; then
                new_island="${ISLAND%/}/${MAINLAND##*/}"
                _info "store to [n]ew [i]sland($new_island)."
            fi

            answer="$(_read - "How to do with this file? [n]othing")"
            case "$answer" in
                s)
                    WORK_MODE=store
                    _die_if_link "$MAINLAND"

                    if _git_file_up_to_date "$ISLAND"; then
                        rm -ri "$ISLAND"
                    else
                        if _y_or_n "ISLAND is dirty, really delete it?"; then
                            rm -ri "$ISLAND"
                        else
                            _warn "Cancelled"
                            return
                        fi
                    fi
                    ;;
                r)
                    WORK_MODE=restore
                    if _y_or_n "really delete the file in the MAINLAND?"; then
                        rm -ri "$ISLAND"
                    else
                        _die "Cancelled"
                    fi
                    ;;
                nw)
                    MAINLAND="$new_world"

                    # Resolve it recursively
                    _wrapper

                    WORK_MODE=restore_new
                    ;;
                ni)
                    ISLAND="$new_island"

                    # Resolve it recursively
                    _wrapper
                    WORK_MODE=store_new
                    ;;
                *) _info "Skip this process"
                   return;;
            esac
        fi
    fi

    case "$WORK_MODE" in
        store)
            if ! $COPY_MODE && _should_copy "$ISLAND" "$MAINLAND"; then
                _warn "We should copy"
                COPY_MODE=true
            fi
            _store
            ;;

        restore)
            _restore
            ;;
    esac
}

# Mapping Part
_modify_mapping_path() {
    # replace $HOME with ~
    echo "$*" | sed "s#^$HOME#~#g"
}

_perm_mapping() {
    # Build mapping line
    local operator island mainland line would

    [ -z "$DFM_FILE" ] && _die "Cannot save mapping when DFM_FILE is empty"
    _die_if_absent "$MAINLAND" "it is not allowed to save mapping without MAINLAND"
    _die_if_absent "$ISLAND" "it is not allowed to save mapping without ISLAND"

    if $COPY_MODE; then
        operator="@c"
    else
        operator="@"
    fi


    island="$(_modify_mapping_path "$ISLAND")"
    mainland="$(_modify_mapping_path "$MAINLAND")"

    line="$operator $island $mainland"

    _info "$line"
    would=$(_read "Would you like to add this line to $DFM_FILE y/[n]/(e)dit")

    case "$would" in
        y)
            echo "$line" >> "$DFM_FILE"
            ;;
        e)
            echo "$line" >> "$DFM_FILE"
            $EDITOR "$DFM_FILE"
            ;;
    esac
}

## Help Part
show_help() {
    cat <<EOF
$SCRIPT -- A tool for file mapping

Basic Usage
  $SCRIPT <ISLAND> <MAINLAND> -- <ISLAND> is standing for dotfile collections, <MAINLAND> is where we referring the file in the daily usage.

  -f <PATH> the dfm file.
  -c copy the file instand of making symlink.
EOF
}

show_help_dfm_file() {
    cat <<EOF
  `.dfm' the file for mapping rules.
  @  <ISLAND> <MAINLAND>
  @c <ISLAND> <MAINLAND>
EOF
}


_run() {
    free_nut
    while [ $# -gt 0 ]; do
        case "$1" in
            -f)
                DFM_FILE="$2"
                shift
                ;;
            -c)
                COPY_MODE=true
                ;;
            *)
                if [ -z "$ISLAND" ]; then
                    ISLAND="$1"
                elif [ -z "$MAINLAND" ]; then
                    MAINLAND="$1"
                fi
        esac
        shift
    done

    _wrapper
}


_run "$@"
