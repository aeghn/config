#!/usr/bin/env bash

set -eu

# Created by dfs

######### TDOC_BEGIN
# is_linux: check if linux
# is_msys: check if msys2
# msg: msg
# warn: warn
# die: die
# ask: ask for prompt, and return the value
# git_managed: check if current dir is in git managed
# git_is_dirty: check if current git repo is dirty
# kln: ln -sT $1 $2
# kcp: cp -rT $1 $2
# kmap: try to map by using kcp or kln
# DFS_DIR
######## TDOC_END

# File to store and restore.

store() {
    warn "store not implement, $PWD"
}

restore() {
    if is_msys; then
        restore_msys2
    else
        restore_nix
    fi
}

restore_nix() {
    cat <<EOF >$HOME/.zshrc
export CHIN_PG_DIR="$HOME/playground"
export CHIN_FILES_DIR="$HOME/files"
source "$DFS_DIR/init.zsh"
source "$DFS_DIR/nix.zsh"
source "$DFS_DIR/tools.zsh"
EOF
}

restore_msys2() {
    ZSHRC="$HOME/.zshrc"
    cat <<EOF >"$ZSHRC"
# !! Do not modify this file.
# !! This file is generated by =dfs r=

export CHIN_PG_DIR="/f/playground-data"
export CHIN_FILES_DIR="/d/files"
export LANG=en_US.UTF-8
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
EOF
    echo "" >>"$ZSHRC"
    cat "$DFS_DIR/init.zsh" >>"$ZSHRC"
    echo >>"$ZSHRC"
    cat "$DFS_DIR/msys2.zsh" >>"$ZSHRC"
    echo >>"$ZSHRC"
    cat "$DFS_DIR/tools.zsh" >>"$ZSHRC"
}
